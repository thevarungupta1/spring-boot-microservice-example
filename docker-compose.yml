version: "3.7"

services:
  zookeeper:
    image: wurstmeister/zookeeper
    volumes:
      - microservices-mysql-data:/var/lib/mysql
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    volumes:
      - microservices-mysql-data:/var/lib/mysql
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "order-topic:1:1, inventory-topic:1:1"
  mysql:
    image: mysql:8.0
    container_name: mysql
    volumes:
      - microservices-mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: microservices
  order-service:
    container_name: order-service
    volumes:
      - microservices-mysql-data:/var/lib/mysql
    build:
      context: ./order-service
      dockerfile: Dockerfile
    image: order-service
    working_dir: /order-service
    ports:
      - "9001:9001"
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: secret
      MYSQL_DB: microservices
      spring.datasource.url: jdbc:mysql://mysql:3306/microservices
      spring.kafka.bootstrap-servers: kafka:9092
    depends_on:
      - mysql
      - kafka
      - zookeeper
  inventory-service:
    container_name: inventory-service
    volumes:
      - microservices-mysql-data:/var/lib/mysql
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    image: inventory-service
    working_dir: /inventory-service
    ports:
      - "9002:9002"
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: secret
      MYSQL_DB: microservices
      spring.datasource.url: jdbc:mysql://mysql:3306/microservices
      spring.kafka.bootstrap-servers: kafka:9092
    depends_on:
      - mysql
      - kafka
      - zookeeper
volumes:
  microservices-mysql-data: